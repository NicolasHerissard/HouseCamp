// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role Int @default(0)
  created_at DateTime @default(now())
  properties Properties[]
  bookings Bookings[]
  accounts Account[]
  Session Session[]

  @@map("users")
}

model Properties {
  id Int @id @default(autoincrement())
  user_id Int
  user User @relation(fields: [user_id], references: [id])
  title String
  description String @db.Text
  city String
  country String
  price Decimal
  max_guests Int
  created_at DateTime @default(now())
  bookings Bookings[]
  EquipmentProperties EquipmentProperties[]
}

model Bookings {
  id Int @id @default(autoincrement())
  user_id Int
  user User @relation(fields: [user_id], references: [id])
  property_id Int
  property Properties @relation(fields: [property_id], references: [id])
  check_in_date DateTime
  check_out_date DateTime
  total_price Decimal
  status String
  created_at DateTime
}

model Equipments {
  id Int @id @default(autoincrement())
  name String
  EquipmentProperties EquipmentProperties[]
}

model EquipmentProperties {
  id Int @id @default(autoincrement())
  property_id Int
  equipment_id Int
  property Properties @relation(fields: [property_id], references: [id])
  equipment Equipments @relation(fields: [equipment_id], references: [id])
}

model Villes_france {
  id Int @id @default(autoincrement())
  name String
}

model Account {
  id                 String    @id @default(cuid())
  userId              Int    @map("user_id")
  type                 String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  scope              String?
  id_token           String? @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       Int?  @map("user_id")
  sessionToken String   @db.Text @map("session_token")
  accessToken  String?  @db.Text @map("access_token")
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}